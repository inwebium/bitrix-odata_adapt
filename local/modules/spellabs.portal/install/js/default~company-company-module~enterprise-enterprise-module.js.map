{"version":3,"sources":["webpack:///./src/app/constants/content-types.ts","webpack:///./src/app/services/banners/banners.service.ts","webpack:///./src/app/services/photo-library/photo-library.service.ts","webpack:///./src/app/services/videos/videos.service.ts"],"names":[],"mappings":"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","file":"default~company-company-module~enterprise-enterprise-module.js","sourcesContent":["export const contentTypes = {\n  album: 'Контентный тип альбома изображений',\n  photo: 'Контентный тип фото'\n};\n","import { Injectable } from '@angular/core';\nimport { ICachingOptions } from '@pnp/odata';\nimport * as moment from 'moment';\n\nimport { Banner } from './banner';\nimport { ListItemsService } from '../list-items-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BannersService extends ListItemsService<Banner>  {\n\n  getListRelativePath(): string {\n    return '';\n  }\n\n  getListTitle(): string {\n    return 'Баннеры';\n  }\n\n  getSelect(): string {\n    return 'Id,Title,slText,slUrl,slShow,slIndex,AttachmentFiles/ServerRelativeUrl,slNewDate,slEndDate';\n  }\n\n  getExpand(): string {\n    return 'AttachmentFiles';\n  }\n\n  getOrderBy(): [string, boolean][] {\n    return [['slIndex', true], ['Created', false]];\n  }\n\n  getTop(): number {\n    return 5;\n  }\n\n  getCachingOptions(): ICachingOptions {\n    return {\n      expiration: moment().add(30, 'minutes').toDate(),\n      key: this.getListTitle(),\n      storeName: 'session'\n    };\n  }\n\n  convertListItemToEntity(item: any): Banner {\n    const banner: Banner = {\n      id: item.Id,\n      title: item.Title,\n      imageUrl: item.AttachmentFiles && item.AttachmentFiles.length > 0 ? item.AttachmentFiles[0].ServerRelativeUrl : null,\n      isShow: item.slShow,\n      url: item.slUrl,\n      text: item.slText,\n      newDate: item.slNewDate && new Date(item.slNewDate),\n      endDate: item.slEndDate && new Date(item.slEndDate)\n    };\n    return banner;\n  }\n\n  convertEntityToListItem(entity: Banner) {\n    throw new Error('Method not implemented.');\n  }\n\n  getMockItems(): Banner[] {\n    return [];\n  }\n\n  isMock(): boolean {\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { ICachingOptions } from '@pnp/odata';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Web } from '@pnp/sp';\r\nimport { flatMap, map } from 'rxjs/operators';\r\nimport * as moment from 'moment';\r\n\r\nimport { SharepointService } from '../sharepoint/sharepoint.service';\r\nimport { ListItemsService } from '../list-items-service';\r\nimport { PhotoLibrary } from './photo-library';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PhotoLibraryService extends ListItemsService<PhotoLibrary>  {\r\n\r\n  constructor(private http: HttpClient,\r\n    private sharepointService: SharepointService) {\r\n    super();\r\n  }\r\n\r\n  getCachingOptions(): ICachingOptions {\r\n    return {\r\n      expiration: moment().add(30, 'minutes').toDate(),\r\n      key: this.getListTitle(),\r\n      storeName: 'session'\r\n    };\r\n  }\r\n\r\n  getListTitle(): string {\r\n    return 'Библиотека фотогалереи';\r\n  }\r\n\r\n  getListRelativePath(): string {\r\n    return 'slPhotoLibrary';\r\n  }\r\n\r\n  getSelect(): string {\r\n    return 'Id,Title,slAlbumCover,slAlbumDescription,slAlbumIndex,slPhotoIndex,File/ServerRelativeUrl,ContentType,ContentTypeId,Created';\r\n  }\r\n\r\n  getExpand(): string {\r\n    return 'File';\r\n  }\r\n\r\n  getOrderBy(): [string, boolean][] {\r\n    return [['Created', false]];\r\n  }\r\n\r\n  getTop(): number {\r\n    return 15;\r\n  }\r\n\r\n  convertListItemToEntity(item: any): PhotoLibrary {\r\n    const entity: PhotoLibrary = {\r\n      id: item.Id,\r\n      title: item.Title,\r\n      albumCover: item.slAlbumCover,\r\n      albumDescription: item.slAlbumDescription,\r\n      albumIndex: item.slAlbumIndex,\r\n      photoIndex: item.slPhotoIndex,\r\n      url: item.File && item.File.ServerRelativeUrl\r\n    };\r\n    return entity;\r\n  }\r\n\r\n  convertEntityToListItem(entity: PhotoLibrary) {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  getMockItems(): PhotoLibrary[] {\r\n    return [];\r\n  }\r\n\r\n  isMock(): boolean {\r\n    return false;\r\n  }\r\n\r\n  getFiles(id: number, webId?: string): Observable<PhotoLibrary[]> {\r\n      console.log('------photoLibraryService getFiles------');\r\n      const params = {\r\n          id: id,\r\n          expand: 'ListItemAllFields',\r\n          urlPostfix: 'folder/files/'\r\n      };\r\n\r\n      return this.getItems(params);/*.pipe(\r\n          map(items => {\r\n              console.log('------photoLibraryService getFiles items------', items);\r\n              return items.map((i: any) => {\r\n                  console.log('------photoLibraryService getFiles i------', i);\r\n                  //const entity = this.convertListItemToEntity(i.ListItemAllFields);\r\n                  i.url = i.ServerRelativeUrl;\r\n                  console.log('------photoLibraryService getFiles i------', i);\r\n                  //console.log('------photoLibraryService getFiles entity------', entity);\r\n                  return i;\r\n              });\r\n          })\r\n      );*/\r\n      \r\n      /*.pipe(\r\n          map(items => {\r\n              console.log('------photoLibraryService getFiles items------', items);\r\n              return items.map((i: any) => {\r\n                  console.log('------photoLibraryService getFiles i------', i);\r\n                  const entity = this.convertListItemToEntity(i.ListItemAllFields);\r\n                  entity.url = i.ServerRelativeUrl;\r\n                  console.log('------photoLibraryService getFiles entity------', entity);\r\n                  return entity;\r\n              });\r\n          })\r\n      )*/\r\n\r\n\r\n    return this.getWebById(webId).pipe(\r\n        map((web: Web) => web.lists.getByTitle(this.getListTitle()).items.getById(id).folder.files.toUrlAndQuery()),\r\n        // flatMap((url: string) => this.http.get(`${this.sharepointService.getRelativeUrl()}/${url}?$expand=ListItemAllFields`)),\r\n        flatMap((url: string) => url.indexOf('://') > 0 ? this.http.get(`${url}?$expand=ListItemAllFields`)\r\n          : this.http.get(`${this.sharepointService.getRelativeUrl()}/${url}?$expand=ListItemAllFields`)),\r\n        map((item: any) => item.value.map(i => {\r\n          const entity = this.convertListItemToEntity(i.ListItemAllFields);\r\n          entity.url = i.ServerRelativeUrl;\r\n          return entity;\r\n        })));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { ICachingOptions } from '@pnp/odata';\nimport * as moment from 'moment';\n\nimport { Video } from './video';\nimport { ListItemsService } from '../list-items-service';\nimport { SharepointService } from '../sharepoint/sharepoint.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VideosService extends ListItemsService<Video> {\n\n  getListTitle(): string {\n    return 'Ссылки на видео';\n  }\n\n  getListRelativePath(): string {\n    return 'lists/slVideo';\n  }\n\n  getSelect(): string {\n    return 'Id,Title,slVideoUrl,slIsIFrame,Created';\n  }\n\n  getExpand(): string {\n    return null;\n  }\n\n  getOrderBy(): [string, boolean][] {\n    return [['Created', false]];\n  }\n\n  getTop(): number {\n    return 5000;\n  }\n\n  getCachingOptions(): ICachingOptions {\n    return {\n      expiration: moment().add(30, 'minutes').toDate(),\n      key: this.getListTitle(),\n      storeName: 'session'\n    };\n  }\n\n  convertListItemToEntity(item: any): Video {\n    const entity: Video = {\n      id: item.Id,\n      title: item.Title,\n      isIFrame: item.slIsIFrame,\n      videoUrl: item.slVideoUrl,\n      created: new Date(item.Created),\n      createdTitle: moment(item.Created).fromNow()\n    };\n    return entity;\n  }\n\n  convertEntityToListItem(entity: Video) {\n    throw new Error('Method not implemented.');\n  }\n\n  getMockItems(): Video[] {\n    return [];\n  }\n\n  isMock(): boolean {\n    return false;\n  }\n\n}\n"],"sourceRoot":""}