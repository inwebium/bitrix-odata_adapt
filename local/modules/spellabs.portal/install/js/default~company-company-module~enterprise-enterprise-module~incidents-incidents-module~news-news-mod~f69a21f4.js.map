{"version":3,"sources":["webpack:///./src/app/services/news-comments/news-comments.service.ts","webpack:///./src/app/services/news-rubrics/news-rubrics.service.ts","webpack:///./src/app/services/news-views/news-views.service.ts","webpack:///./src/app/services/news/news.service.ts"],"names":[],"mappings":"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","file":"default~company-company-module~enterprise-enterprise-module~incidents-incidents-module~news-news-mod~f69a21f4.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { NewsComment } from './newsComment';\nimport { ListItemsService } from '../list-items-service';\nimport { ICachingOptions } from '@pnp/odata';\nimport { Observable, of } from 'rxjs';\n\nimport * as moment from 'moment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewsCommentsService extends ListItemsService<NewsComment> {\n\n\n  getListTitle(): string {\n    return 'Комментарии к новостям';\n  }\n\n  getListRelativePath(): string {\n    return '/Lists/slNewsComments';\n  }\n\n  getSelect(): string {\n    return 'Id,Title,slComment,slLookupNews/Id,slLookupNews/Title,Created,Author/Title,Author/Name,Author/Id';\n  }\n  getExpand(): string {\n    return 'slLookupNews,Author';\n  }\n\n  getOrderBy(): [string, boolean][] {\n    return null;\n  }\n\n  getTop(): number {\n    return 5000;\n  }\n\n  getCachingOptions(): ICachingOptions {\n    return null;\n  }\n\n  convertListItemToEntity(item: any): NewsComment {\n    const comment: NewsComment = {\n      id: item.Id,\n      title: item.Title,\n      comment: item.slComment,\n      newsLookupId: null,\n      name: item.Author.Title,\n      photo: `/_layouts/15/userphoto.aspx?size=M&username=${item.Author.Name}`,\n      dateTitle:  moment(item.Created).calendar()\n    };\n    if (item.slLookupNews) {\n      comment.newsLookupId = item.slLookupNews.Id;\n    }\n    if (item.Author) {\n      comment.authorId = item.Author.Id;\n      comment.authorTitle = item.Author.Title;\n    }\n    return comment;\n  }\n\n  convertEntityToListItem(entity: NewsComment) {\n    return {\n      Id: entity.id,\n      Title: entity.title,\n      slComment: entity.comment,\n      slLookupNewsId: entity.newsLookupId\n    };\n  }\n\n  getMockItems(): NewsComment[] {\n    return [];\n  }\n\n  isMock(): boolean {\n    return false;\n  }\n\n  getItemsByNewsId(ids: number[]): Observable<NewsComment[]> {\n    if (ids && ids.length > 0) {\n      let filter = '';\n      for (const id of ids) {\n        filter += `slLookupNews/Id eq ${id} or`;\n      }\n      filter = filter.slice(0, -3);\n      return this.getItems({ filter: filter, top: ids.length });\n    } else {\n      return of([]);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ICachingOptions } from '@pnp/odata';\nimport * as moment from 'moment';\n\nimport { NewsRubric } from './news-rubric';\nimport { ListItemsService } from '../list-items-service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewsRubricsService extends ListItemsService<NewsRubric>  {\n\n  getListRelativePath(): string {\n    return '';\n  }\n\n  getListTitle(): string {\n    return 'Рубрики новостей';\n  }\n\n  getSelect(): string {\n    return 'Id,Title';\n  }\n\n  getExpand(): string {\n    return null;\n  }\n\n  getOrderBy(): [string, boolean][] {\n    return [['Title', true]];\n  }\n\n  getTop(): number {\n    return 5000;\n  }\n\n  getCachingOptions(): ICachingOptions {\n    return {\n      expiration: moment().add(20, 'minutes').toDate(),\n      key: this.getListTitle(),\n      storeName: 'session'\n    };\n  }\n\n  convertListItemToEntity(item: any): NewsRubric {\n    return { id: item.Id, title: item.Title };\n  }\n\n  convertEntityToListItem(entity: NewsRubric) {\n    return { Id: entity.id, Title: entity.title };\n  }\n\n  getMockItems(): NewsRubric[] {\n    return [{ id: 1, title: 'Рубрика 1' }, { id: 2, title: 'Рубрика 2' }, { id: 3, title: 'Рубрика 3' }];\n  }\n\n  isMock(): boolean {\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ICachingOptions } from '@pnp/odata';\nimport { Observable, of } from 'rxjs';\n\nimport { ListItemsService } from '../list-items-service';\nimport { NewsView } from './newsView';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewsViewsService extends ListItemsService<NewsView>  {\n\n  getListTitle(): string {\n    return 'Просмотры новостей';\n  }\n\n  getListRelativePath(): string {\n    return '/Lists/slNewsViews';\n  }\n\n  getSelect(): string {\n    return 'Id,Title,slLookupNews/Id,slLookupNews/Title,LikedBy/Id,LikesCount';\n  }\n\n  getExpand(): string {\n    return 'slLookupNews,LikedBy';\n  }\n\n  getOrderBy(): [string, boolean][] {\n    return null;\n  }\n\n  getTop(): number {\n    return 5000;\n  }\n\n  getCachingOptions(): ICachingOptions {\n    return null;\n  }\n\n  convertListItemToEntity(item: any): NewsView {\n    const view: NewsView = {\n      id: item.Id,\n      title: item.Title,\n      newsLookupId: null,\n      count: item.LikesCount,\n      userIds: item.LikedBy && item.LikedBy.map(l => l.Id) || []\n    };\n    if (item.slLookupNews) {\n      view.newsLookupId = item.slLookupNews.Id;\n    }\n    return view;\n  }\n\n  convertEntityToListItem(entity: NewsView) {\n    return {\n      Id: entity.id,\n      Title: entity.title,\n      slLookupNewsId: entity.newsLookupId\n    };\n  }\n\n  getMockItems(): NewsView[] {\n    return [];\n  }\n\n  isMock(): boolean {\n    return false;\n  }\n\n  getItemsByNewsId(ids: number[]): Observable<NewsView[]> {\n    if (ids && ids.length > 0) {\n      let filter = '';\n      for (const id of ids) {\n        filter += `slLookupNews/Id eq ${id} or`;\n      }\n      filter = filter.slice(0, -3);\n      return this.getItems({ filter: filter, top: ids.length });\n    } else {\n      return of([]);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ICachingOptions } from '@pnp/odata';\nimport * as moment from 'moment';\n\nimport { ListItemsService } from '../list-items-service';\nimport { News } from './news';\nimport { SharepointService } from '../sharepoint/sharepoint.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewsService extends ListItemsService<News> {\n\n  constructor(private sharepointService: SharepointService) {\n    super();\n  }\n\n  getListRelativePath(): string {\n    return '/Lists/slNews';\n  }\n\n  getListTitle(): string {\n    return 'Новости';\n  }\n\n  getSelect(): string {\n    return 'Id,Title,slNewsAnnouncement,slNewsRubricLookup/Id,slNewsRubricLookup/Title,'\n      + 'slNewsPublicationDate,slNewsBody,Created,AttachmentFiles/ServerRelativeUrl,slNewsCover,'\n      + 'UniqueId,LikedBy/Id,LikesCount';\n  }\n\n  getExpand(): string {\n    return 'slNewsRubricLookup,slNewsRubricLookup,AttachmentFiles,LikedBy';\n  }\n\n  getOrderBy(): [string, boolean][] {\n    return [['slNewsPublicationDate', false], ['Created', false]];\n  }\n\n  getTop(): number {\n    return 10;\n  }\n\n  getCachingOptions(): ICachingOptions {\n    return {\n      expiration: moment().add(30, 'minutes').toDate(),\n      key: this.getListTitle(),\n      storeName: 'session'\n    };\n  }\n\n  convertListItemToEntity(item: any): News {\n    const news: News = {\n      id: item.Id,\n      title: item.Title,\n      newsBody: item.slNewsBody,\n      newsAnnouncement: item.slNewsAnnouncement,\n      newsPublicationDate: item.slNewsPublicationDate && new Date(item.slNewsPublicationDate),\n      attachmentFiles: [],\n      uniqueId: item.UniqueId,\n      likesCount: item.LikesCount || 0,\n      likedByIds: [],\n      imageUrl: item.slNewsCover\n    };\n    if (item.slNewsPublicationDate) {\n      news.newsPublicationDate = new Date(item.slNewsPublicationDate);\n      news.newsPublicationDateTitle = moment(news.newsPublicationDate).calendar(null, {\n        sameDay: '[Сегодня]',\n        nextDay: '[Завтра]',\n        nextWeek: 'L',\n        lastDay: '[Вчера]',\n        lastWeek: 'L',\n        sameElse: 'L'\n      });\n    }\n    if (item.AttachmentFiles) {\n      news.attachmentFiles = item.AttachmentFiles.map(a => a.ServerRelativeUrl);\n    }\n    if (item.slNewsRubricLookup) {\n      news.newsRubricLookupId = item.slNewsRubricLookup.Id;\n      news.newsRubricLookupTitle = item.slNewsRubricLookup.Title;\n    }\n    if (news.imageUrl) {\n      news.imageUrl = news.imageUrl;\n    }\n    if (item.LikedBy) {\n      news.likedByIds = item.LikedBy.map(l => l.Id);\n    }\n    return news;\n  }\n\n  convertEntityToListItem(entity: News) {\n    throw new Error('Method not implemented.');\n  }\n\n  getMockItems(): News[] {\n    return [{ id: 1, title: 'Новость 1' }, { id: 2, title: 'Новость 2' }, { id: 3, title: 'Новость 3' }];\n  }\n\n  isMock(): boolean {\n    return false;\n  }\n}\n"],"sourceRoot":""}